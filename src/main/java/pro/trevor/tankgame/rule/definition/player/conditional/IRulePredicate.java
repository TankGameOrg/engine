package pro.trevor.tankgame.rule.definition.player.conditional;

import pro.trevor.tankgame.state.State;
import pro.trevor.tankgame.state.meta.PlayerRef;
import pro.trevor.tankgame.util.Result;

public interface IRulePredicate {
    /**
     * Test if this predicate's condition is met before a log entry has been created
     *
     * If the predicate can't be tested because it needs metadata it will always return an ok
     * status.  It is assumed that the predicate will be tested again once the log entry has been
     * created.
     *
     * @param state The game state to test
     * @param player The player to test the condition for
     * @return A result indicating whether the predicate's condition was met or why it failed
     */
    Result<String> test(State state, PlayerRef player);

    /**
     * Test if this predicate's condition is met given the data from a log entry
     * @param state The game state to test
     * @param player The player to test the condition for
     * @param meta The meta data generated by the log entry
     * @return A result indicating whether the predicate's condition was met or why it failed
     */
    Result<String> test(State state, PlayerRef player, Object... meta);
}
